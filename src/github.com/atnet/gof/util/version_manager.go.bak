package mod

import
(
	"os"
	"updater/glob"
	"path/filepath"
	"fmt"
	"regexp"
	"strings"
	"strconv"
	"errors"
)

var(
	//版本字符串表示
	latestVersion string
	//版本数值
	latestIntVersion int
	versionRegexp = regexp.MustCompile("(.+?)_v((\\d+).*).zip")
	patchFiles map[string]string
)

//重新加载版本库
func reloadPatchFiles(){
	patchFiles = make(map[string]string)
	latestIntVersion = 0
	latestVersion = "0.0.0"

	srcDir := glob.Config.DevicePatchDir
	//fmt.Println("\n版本库路径：" + srcDir)



    var f filepath.WalkFunc = func(path string,f os.FileInfo,err error)error{
		if err!= nil{
			fmt.Println(err.Error())
			return err
		}

		if !f.IsDir(){
			fName := f.Name()
			if versionRegexp.Match([]byte(fName)) {
				version := versionRegexp.FindStringSubmatch(fName)[2]
				patchFiles[version] = srcDir + fName

				intVersion ,_ :=strconv.Atoi(strings.Replace(version,".","",-1))
				if intVersion > latestIntVersion{
					latestVersion = version
					latestIntVersion = intVersion
				}
			}
		}
		return nil
	}
	err := filepath.Walk(srcDir,f)

	if err != nil {
		fmt.Println(err.Error())
	}else{
		if latestIntVersion > 0 {
			//fmt.Println("[OK] 最新版本：" + latestVersion)
		}else{
			//fmt.Println("［Error] 未检测到版本！")
		}
	}
}

//获取最新的版本
func GetLatestVersion()(version string, patchFile string,err error) {

	//从redis读取版本，如果不一致则重新加载
	//todo: 暂不实现，因为升级包可能会部署至cdn

	if latestIntVersion == 0 {
		return "", "", errors.New("no such version")
	}

	file,exist := patchFiles[latestVersion]
	if exist{
		return latestVersion, file, nil
	}
	return "", "", errors.New("no such file")
}


func init(){
	reloadPatchFiles()
}

func ReloadPatchFiles(){
	reloadPatchFiles();
}
