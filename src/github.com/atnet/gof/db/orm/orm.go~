package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"time"
	"errors"
	"log"
)

type IOrm interface {
	//Set orm output information
	SetTrace(b bool)
	Get(entity interface{}, primaryVal interface{}) error
	CreateTableMap(v interface{}, tableName string)

	//Select more than 1 entity list
	//@to : refrence to queryed entity list
	//@params : query condition
	//@where : other condition
	Select(to interface{},params interface{}, where string)error

	//delete entity and effect to database
	Delete(entity interface {},where string)(effect int64,err error)

	Save(primaryKey interface{},entity interface{})(rows int64,lastInsertId int64,err error)
}

type TableMapMeta struct {
	tableName     string
	pkFieldName   string
	pkIsAuto	  bool
	FieldNames    []string //预留，可能会用到
	FieldMapNames []string
}


//it's a IOrm Impoments for mysql
type DBMap struct {
	tableMap map[string]*TableMapMeta
	*sql.DB
	useTrace	bool
}

func NewDBMap(db *sql.DB) *DBMap {
	return &DBMap{
		DB:       db,
		tableMap: make(map[string]*TableMapMeta),
	}
}

func (this *DBMap) getTableMapMeta(t reflect.Type) *TableMapMeta {
	m, exists := this.tableMap[t.String()]
	if exists {
		return m
	}

	names, maps := this.getFields(t)
	pkName, pkIsAuto := this.getPKName(t)
	m = &TableMapMeta{
		tableName:     t.Name(),
		pkFieldName:  pkName,
		pkIsAuto:    pkIsAuto,
		FieldNames:    names,
		FieldMapNames: maps,
	}

	this.tableMap[t.String()] = m

	if this.useTrace {
		log.Println("[DbMap Meta]:", m)
	}


	return m
}

func (this *DBMap) getFields(t reflect.Type) (names []string, mapNames []string) {
	names = []string{}
	mapNames = []string{}

	fnum := t.NumField()
	var fmn string

	for i := 0; i < fnum; i++ {
		f := t.Field(i)
		if f.Tag != "" {
			fmn = f.Tag.Get("db")
		}
		if fmn == "" {
			fmn = f.Name
		}
		mapNames = append(mapNames, fmn)
		names = append(names, f.Name)
	}
	return names, mapNames
}

func (this *DBMap) getTName(t reflect.Type) string {
	//todo: 用int做键
	v, exists := this.tableMap[t.String()]
	if exists {
		return v.tableName
	}
	return t.Name()
}

//if not defined primary key.the first key will as primary key
func (this *DBMap) getPKName(t reflect.Type)(pkName string,pkIsAuto bool) {
	v, exists := this.tableMap[t.String()]
	if exists {
		return v.pkFieldName,v.pkIsAuto
	}

	var ti int = t.NumField()

	ffc := func(f reflect.StructField)(string,bool) {
			if f.Tag!= ""{
				var iauto bool
				var fname string

				if ia := f.Tag.Get("auto");ia =="yes" || ia =="1"{
					iauto = true
				}

				if fname =f.Tag.Get("db");fname !="" {
					return fname,iauto
				}
				return f.Name,iauto
			}
		return f.Name,false
	}


	for i:=0 ;i<ti;i++ {
		f := t.Field(i)
		if f.Tag != "" {
			pk := f.Tag.Get("pk")
			if pk == "1" || pk == "yes" {
				return ffc(f)
			}
		}
	}

	return ffc(t.Field(0))
}

func (this *DBMap) SetTrace(b bool){
	this.useTrace = b
}

//create a fixed table map
func (this *DBMap) CreateTableMap(v interface{}, tableName string) {
	t := reflect.TypeOf(v)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	meta := this.getTableMapMeta(t)
	meta.tableName = tableName
	this.tableMap[t.String()] = meta

	if this.useTrace{
		log.Println("map meta:",meta)
	}
}

func (this *DBMap) Get(entity interface{}, primaryVal interface{})error {
	var sql string
	var fieldLen int
	t := reflect.TypeOf(entity)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}

	val := reflect.ValueOf(entity)
	if val.Kind() != reflect.Ptr {
		return errors.New("unaddressable of entity ,it must be a ptr")
	}
	val = val.Elem()

	/* build sql */
	meta := this.getTableMapMeta(t)
	fieldLen = len(meta.FieldNames)
	fieldArr := make([]string, fieldLen)
	var scanVals []interface{} = make([]interface{}, fieldLen)
	var rawBytes [][]byte = make([][]byte, fieldLen)

	for i, v := range meta.FieldMapNames {
		fieldArr[i] = v
		scanVals[i] = &rawBytes[i]
	}

	sql = fmt.Sprintf("SELECT %s FROM %s WHERE %s=?",
		strings.Join(fieldArr, ","),
		meta.tableName,
		meta.pkFieldName,
	)

	if this.useTrace{
		log.Println(fmt.Sprintf("[SQL]:%s , [Params]:%s",sql,primaryVal))
	}


	/* query */
	stmt, err := this.DB.Prepare(sql)
	defer stmt.Close()
	if err != nil {
		return errors.New(err.Error() + "\n[SQL]:" + sql)
	}
	row := stmt.QueryRow(primaryVal)
	row.Scan(scanVals...)

	for i := 0; i < fieldLen; i++ {
		field := val.Field(i)
		setField(field, rawBytes[i])
	}
	return nil
}

//Select more than 1 entity list
//@to : refrence to queryed entity list
//@entity : query condition
//@where : other condition
func (this *DBMap) Select(to interface{},entity interface{}, where string)error{
	var sql string
	var condition string
	var fieldLen int
	var isSet bool

	if reflect.ValueOf(to).Kind() != reflect.Ptr {
		return errors.New("unaddressable of to ,it must be a ptr")
	}

	t := reflect.TypeOf(entity)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	val := reflect.Indirect(reflect.ValueOf(entity))

	/* build sql */
	meta := this.getTableMapMeta(t)
	fieldLen = len(meta.FieldNames)
	params := []interface {}{}

	for i, k := range meta.FieldMapNames {
		field := val.Field(i)
		isSet = false

		switch field.Type().Kind() {
		case reflect.String:
			if field.String() != "" {
				isSet = true
				if val.Kind() == reflect.Ptr {
					params = append(params, field.String())
				} else {
					params = append(params, field.String())
				}
			}
			break
		case reflect.Int:
			if field.Int() != 0 {
				isSet = true
				if val.Kind() == reflect.Ptr {
					params = append(params, field.Int())
				} else {
					params = append(params, field.Int())
				}
			}
		}
		if isSet {
			if condition == "" {
				condition = fmt.Sprintf("%s=?", k)
			} else {
				condition = fmt.Sprintf("%s AND %s=?", condition, k)
			}

		}
	}

	if where != "" {
		if condition != "" {
			condition = condition + " AND " + where
		} else {
			condition = where
		}
	}

	fieldArr := make([]string, fieldLen)
	var scanVals []interface{} = make([]interface{}, fieldLen)
	var rawBytes [][]byte = make([][]byte, fieldLen)

	for i, v := range meta.FieldMapNames {
		fieldArr[i] = v
		scanVals[i] = &rawBytes[i]
	}

	sql = fmt.Sprintf("SELECT %s FROM %s WHERE %s",
		strings.Join(fieldArr, ","),
		meta.tableName,
		condition,
	)

	if this.useTrace{
		log.Println(fmt.Sprintf("[SQL]:%s , [Params]:%s",sql,params))
	}

	/* query */
	stmt, err := this.DB.Prepare(sql)
	defer stmt.Close()
	if err != nil {
		panic(err.Error() + "\n[SQL]:" + sql)
	}
	rows,err := stmt.Query(params...)
	defer rows.Close()

	if err != nil {
		panic(err.Error()+"\n[SQL]"+sql)
	}

	/* 用反射来对输出结果复制 */
	toArr := reflect.ValueOf(to).Elem()

	for rows.Next() {
		e := reflect.Indirect(reflect.New(t))

		rows.Scan(scanVals...)
		for i := 0; i < fieldLen; i++ {
			field := e.Field(i)
			setField(field, rawBytes[i])
		}
		toArr = reflect.Append(toArr,e)
	}

	reflect.ValueOf(to).Elem().Set(toArr)
	return nil
}

func (this *DBMap) Delete(entity interface {},where string)(effect int64,err error){
	var sql string
	var condition string
	var isSet bool

	t := reflect.TypeOf(entity)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	val := reflect.Indirect(reflect.ValueOf(entity))

	/* build sql */
	meta := this.getTableMapMeta(t)
	params := []interface {}{}

	for i, k := range meta.FieldMapNames {
		field := val.Field(i)
		isSet = false

		switch field.Type().Kind() {
		case reflect.String:
			if field.String() != "" {
				isSet = true
				if val.Kind() == reflect.Ptr {
					params = append(params, field.String())
				} else {
					params = append(params, field.String())
				}
			}
			break
		case reflect.Int:
			if field.Int() != 0 {
				isSet = true
				if val.Kind() == reflect.Ptr {
					params = append(params, field.Int())
				} else {
					params = append(params, field.Int())
				}
			}
		}
		if isSet {
			if i == 0 {
				condition = fmt.Sprintf("%s=?", k)
			} else {
				condition = fmt.Sprintf("%s AND %s=?", condition, k)
			}

		}
	}

	if where != "" {
		if condition != "" {
			condition = condition + " AND " + where
		} else {
			condition = where
		}
	}

	if condition == "" {
		return 0,errors.New("unknown condition")
	}

	sql = fmt.Sprintf("DELETE FROM %s WHERE %s",
		meta.tableName,
		condition,
	)

	if this.useTrace{
		log.Println(fmt.Sprintf("[SQL]:%s , [Params]:%s",sql,params))
	}

	/* query */
	stmt, err := this.DB.Prepare(sql)
	defer stmt.Close()
	if err != nil {
		return 0,errors.New(err.Error()+"\n[SQL]"+sql)
	}

	result,err := stmt.Exec(params...)
	var rowNum int64 = 0
	if err ==  nil{
		rowNum,err = result.RowsAffected()
	}
	if err != nil{
		return rowNum,errors.New(err.Error()+"\n[SQL]"+sql)
	}
	return rowNum,nil
}

func (this *DBMap) Save(primaryKey interface{},entity interface{})(rows int64,lastInsertId int64,err error) {
	var sql string
	//var condition string
	//var fieldLen int
	var isSet bool

	t := reflect.TypeOf(entity)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	val := reflect.Indirect(reflect.ValueOf(entity))

	/* build sql */
	meta := this.getTableMapMeta(t)
	//fieldLen = len(meta.FieldNames)
	params := []interface{}{}
	fieldArr := []string{}

	for i, k := range meta.FieldMapNames {

		if meta.FieldNames[i] == meta.pkFieldName {
			continue
		}

		field := val.Field(i)
		isSet = false

		switch field.Type().Kind() {
		case reflect.String:
			if field.String() != "" {
				isSet = true
				if val.Kind() == reflect.Ptr {
					params = append(params, field.String())
				} else {
					params = append(params, field.String())
				}
			}
			break
		case reflect.Int:
			if field.Int() != 0 {
				isSet = true
				if val.Kind() == reflect.Ptr {
					params = append(params, field.Int())
				} else {
					params = append(params, field.Int())
				}
			}
		}
		if isSet {
			fieldArr = append(fieldArr, k)
		}
	}

	//insert
	if primaryKey == nil {
		var pArr = make([]string, len(fieldArr))
		for i, _ := range pArr {
			pArr[i] = "?"
		}

		sql = fmt.Sprintf("INSERT INTO %s (%s) VALUES (%s)", meta.tableName,
			strings.Join(fieldArr, ","),
			strings.Join(pArr, ","),
		)

		if this.useTrace {
			log.Println(fmt.Sprintf("[SQL]:%s , [Params]:%s", sql, entity))
		}

		/* query */
		stmt, err := this.DB.Prepare(sql)
		defer stmt.Close()
		if err != nil {
			return 0, 0, errors.New(err.Error()+"\n[SQL]"+sql)
		}

		result, err := stmt.Exec(params...)
		var rowNum int64 = 0
		var lastInsertId int64 = 0
		if err == nil {
			rowNum, _ = result.RowsAffected()
			lastInsertId, _ = result.LastInsertId()
			return rowNum, lastInsertId, nil
		}
		return rowNum, lastInsertId, errors.New(err.Error()+"\n[SQL]"+sql)
	}

	return 0, 0, nil


//	for i, v := range fieldArr {
//		if i == 0 {
//			condition = fmt.Sprintf("%s=?", v)
//		}else {
//			condition = fmt.Sprintf(",%s=?", v)
//		}
//	}
}

func setField(field reflect.Value, d []byte) {
	if field.IsValid() {
		switch field.Type().Kind() {
		case reflect.String:
			field.Set(reflect.ValueOf(string(d)))
			return

		case reflect.Int32:
		case reflect.Int:
			val, err := strconv.Atoi(string(d))
			if err != nil {
				field.Set(reflect.ValueOf(val))
			}
			return
		case reflect.Bool:
			strVal := string(d)
			val := strings.ToLower(strVal) == "true" || strVal == "1"
			field.Set(reflect.ValueOf(val))
			return

			//接口类型
		case reflect.Struct:
			if reflect.TypeOf(time.Now()) == field.Type() {
				t, err := time.Parse("2006-01-02 15:04:05", string(d))
				if err == nil {
					field.Set(reflect.ValueOf(t))
				}
			}
			return
		}


		//case reflect.Interface:
	}
}

