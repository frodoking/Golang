---
invocations:
    - cmd: godebug
    - cmd: godebug help
transcript: |
    godebug is a tool for debugging Go programs.

    Usage:

            godebug command [arguments]

    The commands are:

        build     compile a debug-ready Go program
        run       compile, run, and debug a Go program
        test      compile, run, and debug Go package tests

    Use "godebug help [command]" for more information about a command.

---
invocations:
    - cmd: godebug help output
transcript: |
    usage: godebug output [-w] <packages>

    Output outputs debugging code for <packages>.

    By default, output will print the resulting code to stdout.
    If the -w flag is given, output will overwrite the original
    source files. Use with caution.

    <packages> may take one of two forms:

        1. A list of *.go source files.

           All of the specified files are loaded, parsed and type-checked
           as a single package.  All the files must belong to the same directory.

        2. A list of import paths, each denoting a package.

           The package's directory is found relative to the $GOROOT and
           $GOPATH using similar logic to 'go build', and the *.go files in
           that directory are loaded, parsed and type-checked as a single
           package.

           In addition, all *_test.go files in the directory are then loaded
           and parsed.  Those files whose package declaration equals that of
           the non-*_test.go files are included in the primary package.  Test
           files whose package declaration ends with "_test" are type-checked
           as another package, the 'external' test package, so that a single
           import path may denote two packages.

---
invocations:
    - cmd: godebug help run
transcript: |
    usage: godebug run [-godebugwork] [-instrument pkgs...] [-tags 'tag list'] gofiles... [--] [arguments...]

    Run emulates 'go run' behavior. It generates debugging code for the
    named *.go files and then compiles and executes the result.

    Like 'go run' it takes a list of go files which are treated as a
    single main package. The rest of the arguments is passed to the
    binary. Optionally, a '--' argument ends the list of gofiles.

    By default, godebug generates debugging code only for the named
    Go source files, and not their dependencies. This means that in
    the debugging session you will not be able to step into function
    calls from imported packages. To instrument other packages,
    pass the -instrument flag. Packages are comma-separated and
    must not be relative.

    If -godebugwork is set, godebug will print the name of the
    temporary work directory and not delete it when exiting.

    -tags works like in 'go help build'.

---
invocations:
    - cmd: godebug help test
transcript: |
    usage: godebug test [-godebugwork] [-instrument pkgs...] [-tags 'tag list'] [-c] [-o output] [packages] [flags for test binary]

    Test is a wrapper around 'go test'. It generates debugging code for
    the tests in the named packages and runs 'go test' on the result.

    As with 'go test', by default godebug test needs no arguments.

    Flags parsing, -c and -o work like for 'go test' - see 'go help test'.
    The default binary name for -c has the suffix '.test.debug'.

    See also: 'go help testflag'. Note that you have to use the 'test.'
    prefix like '-test.v'.

    By default, godebug generates debugging code only for the named
    Go source files, and not their dependencies. This means that in
    the debugging session you will not be able to step into function
    calls from imported packages. To instrument other packages,
    pass the -instrument flag. Packages are comma-separated and
    must not be relative.

    If -godebugwork is set, godebug will print the name of the
    temporary work directory and not delete it when exiting.

    -tags works like in 'go help build'.

---
invocations:
    - cmd: godebug help build
transcript: |
    usage: godebug build [-godebugwork] [-instrument pkgs...] [-tags 'tag list'] [-o output] [package]

    Build is a wrapper around 'go build'. It generates debugging code for
    the named target and builds the result.

    Like 'go build' it takes a single main package. If arguments are a list
    of *.go files they are treated as a single package. Relative packages are
    not supported - which means you can't leave the package name out, too.

    The output file naming if -o is not passed works like 'go build' (see
    'go help build') with the addition of the suffix '.debug'.

    By default, godebug generates debugging code only for the named
    Go source files, and not their dependencies. This means that in
    the debugging session you will not be able to step into function
    calls from imported packages. To instrument other packages,
    pass the -instrument flag. Packages are comma-separated and
    must not be relative.

    If -godebugwork is set, godebug will print the name of the
    temporary work directory and not delete it when exiting.

    -tags works like in 'go help build'.

---
invocations:
    - cmd: godebug help foo
    - cmd: godebug help foo -bar baz
transcript: |
    Unknown help topic `foo`. Run 'godebug help'.
