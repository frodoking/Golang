---
# Stepping into foo.HelloWorld() should not work, because we are not instrumenting
# package foo. It should continue to the next line instead.
invocations:
    - dir: /
      cmd: godebug run a.go
    - dir: /gopath/src
      cmd: godebug run ../../a.go
creates:
    - $TMP/a.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> foo.HelloWorld()
    (godebug) step
    Hello, world!
    -> foo.HelloWorld()
    (godebug) next
    Hello, world!

---
desc: when -godebugwork is passed, should print temp directory and not delete it on exit
invocations:
    - dir: /
      cmd: godebug run -godebugwork a.go
creates:
    - $TMP/a.go

transcript: |
    $TMP
    -> _ = "breakpoint"
    (godebug) n
    -> foo.HelloWorld()
    (godebug) step
    Hello, world!
    -> foo.HelloWorld()
    (godebug) next
    Hello, world!

godebugwork: true

---
desc: when -godebugwork is passed, should print temp directory and not delete it on exit
invocations:
    - dir: /
      cmd: godebug run -godebugwork -instrument=foo a.go
creates:
    - $TMP/a.go
    - $TMP/src/foo/foo.go

transcript: |
    $TMP
    -> _ = "breakpoint"
    (godebug) n
    -> foo.HelloWorld()
    (godebug) step
    -> fmt.Println("Hello, world!")
    (godebug) step
    Hello, world!
    -> foo.HelloWorld()
    (godebug) next
    Hello, world!

godebugwork: true

---
# 'godebug run' with multiple packages passed to -instrument
# There are three imported packages: foo, bar, an baz.
# We can step into bar and baz because we instrumented them, but not foo.
invocations:
    - dir: /
      cmd: godebug run -instrument=bar,baz fooBarBaz.go
    - dir: /
      cmd: godebug run --instrument baz,bar fooBarBaz.go
    - dir: /
      # instrumenting main is always useless but harmless for godebug run
      cmd: godebug run --instrument main,baz,bar fooBarBaz.go
    - dir: /gopath/src/foo
      cmd: godebug run --instrument ../baz,../bar ../../../fooBarBaz.go
creates:
    - $TMP/fooBarBaz.go
    - $TMP/src/bar/bar.go
    - $TMP/src/baz/baz.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> foo.Foo()
    (godebug) step
    foo
    -> bar.Bar()
    (godebug) step
    -> fmt.Println("bar")
    (godebug) step
    bar
    -> baz.Baz()
    (godebug) step
    -> fmt.Println("baz")
    (godebug) step
    baz

---
# Like previous, but now we can step into all three packages.
invocations:
    - dir: /
      cmd: godebug run -instrument=foo,bar,baz fooBarBaz.go
    - dir: /
      cmd: godebug run --instrument baz,foo,bar fooBarBaz.go
    - dir: /
      # instrumenting main is always useless but harmless for godebug run
      cmd: godebug run --instrument baz,foo,bar,main fooBarBaz.go
creates:
    - $TMP/fooBarBaz.go
    - $TMP/src/foo/foo.go
    - $TMP/src/bar/bar.go
    - $TMP/src/baz/baz.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> foo.Foo()
    (godebug) step
    -> fmt.Println("foo")
    (godebug) step
    foo
    -> bar.Bar()
    (godebug) step
    -> fmt.Println("bar")
    (godebug) step
    bar
    -> baz.Baz()
    (godebug) step
    -> fmt.Println("baz")
    (godebug) step
    baz

---
# Like previous, but using --instrument all. Adds a warning.
invocations:
    - dir: /
      # Should instrument only the transitive dependencies, not actually all packages.
      cmd: godebug run --instrument all fooBarBaz.go
creates:
    - $TMP/fooBarBaz.go
    - $TMP/src/foo/foo.go
    - $TMP/src/bar/bar.go
    - $TMP/src/baz/baz.go

transcript: |
    godebug run: heads up: "all" means "all except std". godebug can't step into the standard library yet.

    -> _ = "breakpoint"
    (godebug) n
    -> foo.Foo()
    (godebug) step
    -> fmt.Println("foo")
    (godebug) step
    foo
    -> bar.Bar()
    (godebug) step
    -> fmt.Println("bar")
    (godebug) step
    bar
    -> baz.Baz()
    (godebug) step
    -> fmt.Println("baz")
    (godebug) step
    baz

---
# 'godebug run' with the -instrument flag
invocations:
    - dir: /
      cmd: godebug run -instrument foo a.go
    - dir: /
      cmd: godebug run --instrument=foo a.go
creates:
    - $TMP/a.go
    - $TMP/src/foo/foo.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> foo.HelloWorld()
    (godebug) step
    -> fmt.Println("Hello, world!")
    (godebug) step
    Hello, world!
    -> foo.HelloWorld()
    (godebug) next
    Hello, world!

---
# 'godebug run' on multiple files
invocations:
    - dir: /dir1
      cmd: godebug run a.go b.go c.go
    - dir: /
      cmd: godebug run dir1/c.go dir1/b.go dir1/a.go
creates:
    - $TMP/a.go
    - $TMP/b.go
    - $TMP/c.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> b()
    (godebug) step
    -> c()
    (godebug) step
    -> fmt.Println("hello")
    (godebug) step
    hello

---
# 'godebug run' with arguments to the compiled binary
invocations:
    - dir: /
      cmd: godebug run with-args.go --foo hello
    - dir: /
      cmd: godebug run with-args.go -foo=hello
creates:
    - $TMP/with-args.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> flag.Parse()
    (godebug) print foo
    "foo's default value"
    (godebug) next
    -> _ = foo
    (godebug) print foo
    "hello"
    (godebug) continue

---
desc: running with no arguments should print a useful message
invocations:
    - cmd: godebug run

transcript: "godebug run: no go files listed"

nonzero_exit: true

---
desc: running with a package name should fail
invocations:
    - cmd: godebug run foo

transcript: "godebug run: no go files listed"

nonzero_exit: true

---
desc: should be able to pass .go files in the arguments list
invocations:
    - dir: /
      cmd: godebug run arg-printer.go foo with-args.go
creates:
    - $TMP/arg-printer.go

# arg-printer.go has no breakpoints set.
# It just prints its arguments.
transcript: |
    foo
    with-args.go

---
desc: should be able to pass a .go file as the first argument
invocations:
    - dir: /
      cmd: godebug run arg-printer.go -- with-args.go a.go
creates:
    - $TMP/arg-printer.go

transcript: |
    with-args.go
    a.go

---
desc: should be able to pass a literal '--' argument
invocations:
    - dir: /
      cmd: godebug run arg-printer.go -- -- foo.go
creates:
    - $TMP/arg-printer.go

transcript: |
    --
    foo.go

---
desc: passing "-instrument=std" should fail
invocations:
    - dir: /
      cmd: godebug run -instrument=std fooBarBaz.go
    - dir: /
      cmd: godebug run --instrument foo,std,bar fooBarBaz.go

transcript: |
    godebug run: reserved name "std" cannot be passed in the -instrument flag.
    godebug cannot currently instrument packages in the standard library.
    Do you wish it could? Chime in at https://github.com/mailgun/godebug/issues/12

nonzero_exit: true

---
desc: passing "-instrument=all" should print a warning
invocations:
    - dir: /
      cmd: godebug run -instrument=all arg-printer.go some-arg
creates:
    - $TMP/arg-printer.go

transcript: |
    godebug run: heads up: "all" means "all except std". godebug can't step into the standard library yet.

    some-arg

---
desc: should be able to pass "..." to -instrument flag
invocations:
    - dir: /
      cmd: godebug run -instrument=foo/... fooDDD.go
creates:
    - $TMP/fooDDD.go
    - $TMP/src/foo/foo.go
    - $TMP/src/foo/subfoo/subfoo.go

transcript: |
    -> _ = "breakpoint"
    (godebug) n
    -> foo.Foo()
    (godebug) step
    -> fmt.Println("foo")
    (godebug) step
    foo
    -> subfoo.SubFoo()
    (godebug) step
    -> _ = "in subfoo"
    (godebug) next

---
desc: godebug should warn the user if an unistrumented file contains a breakpoint
invocations:
    - dir: /
      cmd: godebug run breakpointInDependency.go
creates:
    - $TMP/breakpointInDependency.go

transcript: |
    godebug run: Ignoring breakpoint at testpkg/pkg.go:4 because package "testpkg" has not been flagged for instrumentation. See 'godebug help run'.//slashes

    finished running
