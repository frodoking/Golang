-> _ = "breakpoint"
(godebug) n
-> doPanic(r1)
(godebug) s
-> defer recoverer()
(godebug) n
-> panic("doPanic: panic")
(godebug) n
-> <Running deferred function>: defer recoverer()
(godebug) s
-> recover()
(godebug) n
-> doPanic(r2)
(godebug) s
-> defer recoverer()
(godebug) n
-> panic("doPanic: panic")
(godebug) n
-> <Running deferred function>: defer recoverer()
(godebug) s
-> if r := recover(); r == nil {
(godebug) p r
r is not in scope (or is in package scope). Can't print it.
(godebug) n
-> if r := recover(); r != nil {
(godebug) p r
r is not in scope (or is in package scope). Can't print it.
(godebug) n
-> doPanic(r3)
(godebug) s
-> defer recoverer()
(godebug) n
-> panic("doPanic: panic")
(godebug) n
-> <Running deferred function>: defer recoverer()
(godebug) s
-> recover()
(godebug) n
-> doPanic(r4)
(godebug) s
-> defer recoverer()
(godebug) n
-> panic("doPanic: panic")
(godebug) n
-> <Running deferred function>: defer recoverer()
(godebug) s
-> if r := recover(); r == nil {
(godebug) p r
r is not in scope (or is in package scope). Can't print it.
(godebug) n
-> if r := recover(); r != nil {
(godebug) p r
r is not in scope (or is in package scope). Can't print it.
(godebug) n
-> doNestedRecover(r1)
(godebug) s
-> defer func() {
(godebug) n
-> panic("doNestedRecover: panic")
(godebug) n
-> <Running deferred function>: defer func() {
(godebug) s
-> recoverer()
(godebug) n
-> if r := recover(); r == nil {
(godebug) n
-> doNestedRecover(r3)
(godebug) s
-> defer func() {
(godebug) n
-> panic("doNestedRecover: panic")
(godebug) n
-> <Running deferred function>: defer func() {
(godebug) s
-> recoverer()
(godebug) s
-> recover()
(godebug) n
-> if r := recover(); r == nil {
(godebug) n
-> recovererWithParams(2, "foo")
(godebug) step
-> recover()
(godebug) print s
"foo"
(godebug) continue
