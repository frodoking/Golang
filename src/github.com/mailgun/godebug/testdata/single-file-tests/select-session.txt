-> _ = "breakpoint"
(godebug) n
-> go func() {
(godebug) list


    	// -------------------
    	// Check simple cases.

--> 	go func() {
    		select {}
    	}()

    	select {

(godebug) step
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
< All channel expressions evaluated. Choosing case to proceed. >
-> default:
(godebug) n
-> c[0] <- 0
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case <-c[0]:
(godebug) n
-> c[0] <- 0
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case <-c[1]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case <-c[0]:
(godebug) hi
Command not recognized, sorry!
(godebug) n
-> hi := "hello"
(godebug) hi
Command not recognized, sorry!
(godebug) n
-> fmt.Println(hi)
(godebug) hi
"hello"
(godebug) n
hello
-> c[0] <- 0
(godebug) n
-> hi := "hi"
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case <-c[1]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case <-c[0]:
(godebug) n
-> hi := "hello"
(godebug) n
-> fmt.Println(hi)
(godebug) hi
"hello"
(godebug) n
hello
-> _ = hi
(godebug) hi
"hi"
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case <-c[1]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> default:
(godebug) n
-> hi := "hello"
(godebug) hi
Command not recognized, sorry!
(godebug) n
-> fmt.Println(hi)
(godebug) hi
"hello"
(godebug) n
hello
-> c[9] <- 1
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case _ = <-c[1]:
(godebug) n
-> case r1 = <-c[2]:
(godebug) n
-> case r2 := <-c[3]:
(godebug) n
-> case _, _ = <-c[4]:
(godebug) n
-> case r1, _ = <-c[5]:
(godebug) n
-> case _, ok = <-c[6]:
(godebug) n
-> case _, ok1 := <-c[7]:
(godebug) n
-> case r1, ok = <-c[8]:
(godebug) n
-> case r2, ok := <-c[9]: // This is the case that will proceed.
(godebug) n
-> case <-foo():
(godebug) step
-> return make(chan int)
(godebug) step
-> case _ = <-foo():
(godebug) step
-> return make(chan int)
(godebug) next
-> case r1 = <-foo():
(godebug) list

    		_, _ = r2, ok

    	case <-foo():
    	case _ = <-foo():
--> 	case r1 = <-foo():
    	case r2 := <-foo():
    		_ = r2

    	case _, _ = <-foo():

(godebug) n
-> case r2 := <-foo():
(godebug) n
-> case _, _ = <-foo():
(godebug) n
-> case r1, _ = <-foo():
(godebug) n
-> case _, ok = <-foo():
(godebug) s
-> return make(chan int)
(godebug) n
-> case _, ok1 := <-foo():
(godebug) n
-> case r1, ok = <-foo():
(godebug) n
-> case r2, ok := <-foo():
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case r2, ok := <-c[9]: // This is the case that will proceed.
(godebug) list

    	case _, ok = <-c[6]:
    	case _, ok1 := <-c[7]:
    		_ = ok1
    	case r1, ok = <-c[8]:
--> 	case r2, ok := <-c[9]: // This is the case that will proceed.
    		_, _ = r2, ok

    	case <-foo():
    	case _ = <-foo():

(godebug) n
-> _, _ = r2, ok
(godebug) ok
true
(godebug) r2
1
(godebug) n
-> c[0], c[1] = make(chan int), make(chan int) // unbuffered
(godebug) r2
Command not recognized, sorry!
(godebug) n
-> go func() {
(godebug) step
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case c[0] <- 0:
(godebug) n
-> case c[1] <- bar():
(godebug) step
-> return 0
(godebug) step
-> case foo() <- 0:
(godebug) step
-> return make(chan int)
(godebug) step
-> case foo() <- bar():
(godebug) step
-> return make(chan int)
(godebug) s
-> return 0
(godebug) step
< All channel expressions evaluated. Choosing case to proceed. >
-> case c[1] <- bar():
(godebug) step
-> fmt.Println("sent")
(godebug) step
sent
